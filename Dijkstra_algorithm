# standard dijkstra algorithm

import heapq

def dijkstra(graph, start):
    
    d = {node: float('inf') for node in graph}
    d[start] = 0
    prev = {node: None for node in graph}
    visited = set()

    heap = [(0, start)]

    while heap:
        current_dist, u = heapq.heappop(heap)
        
        if u in visited:
            continue
        visited.add(u)

        for v, weight in graph[u]:
            if v not in visited and d[u] + weight < d[v]:
                d[v] = d[u] + weight
                prev[v] = u
                heapq.heappush(heap, (d[v], v))

    return d, prev

graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 2), ('D', 5)],
    'C': [('D', 1)],
    'D': []
}

distances, predecessors = dijkstra(graph, 'A')

print("distances:", distances)
print("privious node:", predecessors)
